// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  USER
}

enum EventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  defaultShippingAddress Int?
  defaultBillingAddress Int?
  cartItems Cart[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  addresses Address[]
  orders Orders[]

  @@map("users")
}

model Address {
  id        Int      @id @default(autoincrement())
  lineOne String
  lineTwo String?
  city String
  country String
  pincode String
  userId Int
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Decimal
  tags        String
  cartItems Cart[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order OrderProduct[]

  @@map("products")
}


model Cart {
  id          Int      @id @default(autoincrement())
  userId Int 
  user User @relation(fields: [userId], references: [id])
  productId Int 
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cartItems")
}

model Orders {
  id          Int      @id @default(autoincrement())
  userId Int 
  user User @relation(fields: [userId], references: [id])
  netAmount Decimal
  address String
  products OrderProduct[]
  events OrderEvent[]
  status EventStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("orders")
}

model OrderProduct{
  id          Int      @id @default(autoincrement())
  orderId Int
  order Orders @relation(fields: [orderId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("order_products")
}

model OrderEvent {
  id          Int      @id @default(autoincrement())
  orderId Int
  order Orders @relation(fields: [orderId], references: [id])
  status EventStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("order_event")
}